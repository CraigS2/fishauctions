# Generated by Django 3.1.1 on 2020-10-04 15:28

import autoslug.fields
from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Auction',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', autoslug.fields.AutoSlugField(editable=False, populate_from='title', unique=True)),
                ('sealed_bid', models.BooleanField(default=False)),
                ('lot_entry_fee', models.PositiveIntegerField(default=0, help_text='The amount, in dollars, that the seller will be charged if a lot sells', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('unsold_lot_fee', models.PositiveIntegerField(default=0, help_text="The amount, in dollars, that the seller will be charged if their lot doesn't sell", validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(10)])),
                ('winning_bid_percent_to_club', models.PositiveIntegerField(default=0, help_text='To give 70% of the final bid to the seller, enter 30 here', validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('date_start', models.DateTimeField()),
                ('date_end', models.DateTimeField()),
                ('watch_warning_email_sent', models.BooleanField(default=False)),
                ('invoiced', models.BooleanField(default=False)),
                ('area', models.CharField(help_text='State or region of this auction', max_length=300)),
                ('pickup_location', models.CharField(help_text='Description of pickup location', max_length=300)),
                ('pickup_location_map', models.CharField(help_text='Find the location on Google maps, click Menu>Share or Embed Map and paste the embed link here', max_length=2000)),
                ('pickup_time', models.DateTimeField()),
                ('alternate_pickup_location', models.CharField(blank=True, help_text='Description of alternate pickup location', max_length=300, null=True)),
                ('alternate_pickup_location_map', models.CharField(blank=True, help_text='Google Maps link to alternate pickup location', max_length=2000, null=True)),
                ('alternate_pickup_time', models.DateTimeField(blank=True, null=True)),
                ('notes', models.CharField(blank=True, max_length=500, null=True)),
                ('code_to_add_lots', models.CharField(blank=True, help_text='This is like a password: People in your club will enter this code to put their lots in this auction', max_length=255, null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
            options={
                'verbose_name_plural': 'Categories',
            },
        ),
        migrations.CreateModel(
            name='Club',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('sold', models.TextField(blank=True)),
                ('total_sold', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('bought', models.TextField(blank=True)),
                ('total_bought', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('paid', models.BooleanField(default=False)),
                ('email_sent', models.BooleanField(default=True)),
                ('auction', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.auction')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Lot',
            fields=[
                ('lot_number', models.AutoField(primary_key=True, serialize=False)),
                ('lot_name', models.CharField(default='', help_text='Species name or common name', max_length=255)),
                ('image', models.ImageField(blank=True, help_text='Add a picture of the item here', upload_to='images/')),
                ('image_source', models.CharField(blank=True, choices=[('ACTUAL', 'This picture is of the exact item'), ('REPRESENTATIVE', "This is my picture, but it's not of this exact item.  e.x. This is the parents of these fry"), ('RANDOM', 'This picture is from the internet')], help_text='Where did you get this image?', max_length=20)),
                ('i_bred_this_fish', models.BooleanField(default=False, help_text='Check to get breeder points for this lot')),
                ('description', models.CharField(blank=True, max_length=500, null=True)),
                ('quantity', models.PositiveIntegerField(default=1, help_text='How many of this item are in this lot?', validators=[django.core.validators.MinValueValidator(1)])),
                ('reserve_price', models.PositiveIntegerField(default=2, help_text='The item will not be sold unless someone bids at least this much', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(200)])),
                ('date_posted', models.DateTimeField(auto_now_add=True)),
                ('date_end', models.DateTimeField(blank=True, null=True)),
                ('active', models.BooleanField(default=True)),
                ('winning_price', models.PositiveIntegerField(blank=True, null=True)),
                ('banned', models.BooleanField(default=False)),
                ('donation', models.BooleanField(default=False, help_text='All proceeds from this lot should go to the auction')),
                ('watch_warning_email_sent', models.BooleanField(default=False)),
                ('transportable', models.BooleanField(default=True)),
                ('auction', models.ForeignKey(blank=True, help_text="Select an auction to put this lot into.  This lot must be brought to the auction's pickup location", null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.auction')),
                ('buyer_invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='buyer_invoice', to='auctions.invoice')),
                ('seller_invoice', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='seller_invoice', to='auctions.invoice')),
            ],
        ),
        migrations.CreateModel(
            name='Watch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('lot_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auctions.lot')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserPreferences',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('phone_number', models.CharField(blank=True, max_length=20, null=True)),
                ('address', models.CharField(blank=True, max_length=500, null=True)),
                ('club', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.club')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.location')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('common_name', models.CharField(help_text='The name usually used to describe this species', max_length=255)),
                ('scientific_name', models.CharField(blank=True, help_text='Latin name used to describe this species', max_length=255)),
                ('breeder_points', models.BooleanField(default=True)),
                ('category', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.category')),
            ],
            options={
                'verbose_name_plural': 'Products and species',
            },
        ),
        migrations.AddField(
            model_name='lot',
            name='species',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.product'),
        ),
        migrations.AddField(
            model_name='lot',
            name='species_category',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='auctions.category'),
        ),
        migrations.AddField(
            model_name='lot',
            name='user',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lot',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='winner', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='Bid',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bid_time', models.DateTimeField(auto_now_add=True)),
                ('amount', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1)])),
                ('lot_number', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='auctions.lot')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        # migrations.AlterUniqueTogether(
        #     name='lot',
        #     unique_together={('user', 'active', 'lot_name', 'description')},
        # ),
    ]
